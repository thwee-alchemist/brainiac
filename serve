#!/usr/bin/env node

const tls = require('tls');

tls.DEFAULT_MAX_VERSION = tls.DEFAULT_MAX_VERSION;

const fs = require('fs')
const https = require('https')

const express = require('express')
const favicon = require('serve-favicon')
const path = require('path')
const app = express()
const bodyParser = require('body-parser');

var MongoClient = require('mongodb').MongoClient
  , assert = require('assert');

var url = 'mongodb://localhost/brainiac';

const client = new MongoClient(url);

try{
  client.connect(function(err, db) {
    db = db.db('brainiac');
    console.log("Connected correctly to server");
    assert.equal(null, err);
    var settings = db.collection('settings');
    var results = db.collection('results');

    app.post('/settings', (req, res) => {
      console.log('settings received')
      console.log(req.body.i, req.body.settings);

      settings.insertMany([{
        'i': req.body.i,
        'settings': req.body.settings
      }])
    
      res.status(200).send()
    })

    app.post('/results', (req, res) => {
      console.log('results received');

      results.insertMany([{
        'i': req.body.i,
        'stopped': req.body.stopped,
        'edge_length': req.body.edge_length,
        'running_time': req.body.running_time
      }], (err, result) => {
        assert.equal(err, null);
        console.log(result)
      });
    })
  });
}catch(e){
  console.error(e);
  client.close();
}


const C = require('./lib/combinatorics')

express.static.mime.define({
  'wasm': 'application/wasm',
  'js': 'application/javascript',
  'css': 'text/css'
})

app.use(bodyParser.json());
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use('/', express.static(path.join(__dirname, 'public')));

const settingNames = ['attraction', 'repulsion', 'epsilon', 'time_dilation', 'inner_distance', 'friction', 'dampening', 'theta'];

const vary = function*(){
  const range = function*(start, end, step){
    let val = start;
    while(val <= end){
      yield val;
      val += step;
    }
  }

  let signs = range(-1, 1, 1);
  let bases = range(-9, 9, 1);
  let expSigns = range(-1, 1, 1);
  let exps = range(-6, 6, 1);

  let cp = C.cartesianProduct([...signs], [...bases], [...expSigns], [...exps]);
  const setting = function(sign, base, expSign, exp){
    return parseFloat(`${sign * base}e${expSign * exp}`);
  }

  let raw;
  while(raw = cp.next()){
    yield setting(...raw);
  }
}

const allSettings = C.baseN([...vary()], settingNames.length);
console.log('allSettings.length', allSettings.length);



var i=0;
app.get('/', (req, res) => {
  const settings = allSettings.nth(i);
  const s = {};
  settingNames.forEach((settingName, j) => {
    s[settingName] = settings[j];
  })

  let template = `
<!DOCTYPE html>
<html ng-app="BrainiacApp">
  <head>
    <meta charset="utf-8">
    <title>Brainiac</title>
    <link rel="stylesheet" href="app.css">
    <script src="angular.min.js"></script>
    <script src="graph-visualization.bundle.js"></script>
    <script src="three.min.js"></script>
    <script src="app.js"></script>
  </head>
  <body ng-controller="BrainiacCtrl">

    <script type="text/javascript">
      i=${i};
      epsilon=${s.epsilon};
      attraction=${s.attraction};
      repulsion=${s.repulsion};
      friction=${s.friction};
      time_dilation=${s.time_dilation};
      inner_distance=${s.inner_distance};
      dampening=${s.dampening};
      theta=${s.theta};
    </script>
    <graph-visualization id="graph"
      data-settings-i="${i}"
      width="100%"
      height="100%"
      epsilon="${s.epsilon}"
      attraction="${s.attraction}"
      repulsion="${s.repulsion}"
      friction="${s.friction}"
      time-dilation="${s.time_dilation}"
      inner-distance="${s.inner_distance}"
      dampening="${s.dampening}"
      theta="${s.theta}"
      >
      <graph-vertex id="one"></graph-vertex>
      <graph-vertex id="two"></graph-vertex>
      <graph-edge id="edge" source="#one" target="#two"></graph-edge>
    </graph-visualization>
  </body>
</html>
`;

  res.send(template);
  i++;
})

var credentials = {
  key: fs.readFileSync('/etc/ssl/localcerts/localhost.key'),
  cert: fs.readFileSync('/etc/ssl/localcerts/localhost.pem')
}

const server = https.createServer(credentials, app)

const port = 443
server.listen(port)