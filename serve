#!/usr/bin/env node

var server_settings = {};

if(process.argv.length == 4){
  server_settings.run = process.argv[2];

  if(process.argv[3] == '--randomize'){
    server_settings.randomize = true;
  }else{
    server_settings.i_seed = parseInt(process.argv[3]);
  }
}else{
  console.log(`Usage: sudo node <run name> [<i seed> | --randomize]`)
  return;
}
const tls = require('tls');

tls.DEFAULT_MAX_VERSION = tls.DEFAULT_MAX_VERSION;

const fs = require('fs');
const https = require('https');

const express = require('express');
const favicon = require('serve-favicon');
const path = require('path');
const app = express();
const bodyParser = require('body-parser');

var credentials = {
  key: fs.readFileSync('/etc/ssl/localcerts/localhost.key'),
  cert: fs.readFileSync('/etc/ssl/localcerts/localhost.pem')
}

const server = https.createServer(credentials, app)
const io = require('socket.io')(server);

const port = 443
server.listen(port)


var MongoClient = require('mongodb').MongoClient
  , assert = require('assert');

var url = 'mongodb://localhost/brainiac';

const client = new MongoClient(url);

try{
  client.connect(function(err, db) {
    db = db.db('brainiac');
    console.log("Connected to server");
    assert.equal(null, err);
    var settings = db.collection('settings');
    var results = db.collection('results');

    /**
     * This route accepts a settings object at the beginning
     * of the run of an experiment
     */
    app.post('/settings', (req, res) => {
      console.log('settings received')
      console.log(req.body.i, req.body.settings);

      settings.insertMany([{
        'i': req.body.i,
        'run': req.body.run,
        'settings': req.body.settings
      }])
    
      res.status(200).send()
    })

    /**
     * This route accepts the results of an experiment launched from /
     */
    app.post('/results', (req, res) => {
      console.log('results received');

      results.insertOne({
        'i': req.body.i,
        'stopped': req.body.stopped,
        'edge_length': req.body.edge_length,
        'running_time': req.body.running_time,
        'run': req.body.run,
        'settings': req.body.settings
      }, (err, result) => {
        assert.equal(err, null);
        console.dir(result)
      });

      res.status(200).send();
    })

    /**
     * Sets up the rbaining page, which loads brain js
     */
    app.use('/results', express.static(path.join(__dirname, 'braining')));

    io.on('connection', (socket) => {

      socket.on('runs?', () => {
        console.log('fetching index');

        const runs = results.distinct('run').then((runs) => {
          console.log(runs);
          socket.emit('runs', runs);
        }, (reason) => {
          console.error(reason);
        })
      })

      socket.on('results?', (selectedRun) => {
        console.log('fetch results for', selectedRun);

        var resultStream = results.find({run: {$eq: selectedRun}}).stream();
        resultStream.on('error', function (err) {
          console.error(err);
  
          socket.emit('error')
        });

        resultStream.on('data', function (result) {
          console.log('result', result);
          console.log('result.i', result.i)

          const select = (_in, fields) => {
            var _out = {};
            fields.forEach(f => _out[f] = _in[f]);
            return _out;
          }
          const record = {
            input: select(result.settings, settingNames),
            output: select(result, ['edge_length', 'running_time', 'stopped', 'i'])
          }

          console.log('result', record)  
          socket.emit('result', record);
        })

        resultStream.on('end', function(){
          socket.emit('results end');
        });
      });
    })

  });
}catch(e){
  console.error(e);
  client.close();
}


const C = require('./lib/combinatorics')

express.static.mime.define({
  'wasm': 'application/wasm',
  'js': 'application/javascript',
  'css': 'text/css'
})

app.use(bodyParser.json());
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use('/', express.static(path.join(__dirname, 'public')));

const settingNames = ['attraction', 'repulsion', 'epsilon', 'time_dilation', 'inner_distance', 'friction', 'dampening', 'theta'];

const vary = function*(){
  const range = function*(start, end, step){
    let val = start;
    while(val <= end){
      yield val;
      val += step;
    }
  }

  let signs = range(-1, 1, 1);
  let bases = range(1, 9, 1);
  let expSigns = range(-1, 1, 1);
  let exps = range(-4, 4, 1);

  let cp = C.cartesianProduct([...signs], [...bases], [...expSigns], [...exps]);
  const setting = function(sign, base, expSign, exp){
    return parseFloat(`${sign * base}e${expSign * exp}`);
  }

  let raw;
  while(raw = cp.next()){
    yield setting(...raw);
  }
}

const allSettings = C.baseN([...vary()], settingNames.length);
console.log('allSettings.length', allSettings.length);


/**
 * The main route prepares a page for a graph-visualization experiment
 * setting the variables to a random set of settings within the parameters
 * defined  by the vary function. 
 */
var L = allSettings.length;
var i = server_settings.i_seed !== undefined ? i_seed : 0;
app.get('/', (req, res) => {
  if(server_settings.randomize){
    i = Math.floor(Math.random() * L);
  }

  const settings = allSettings.nth(i);
  const s = {};
  settingNames.forEach((settingName, j) => {
    s[settingName] = settings[j];
  })

  let template = `
<!DOCTYPE html>
<html ng-app="BrainiacApp">
  <head>
    <meta charset="utf-8">
    <title>Brainiac</title>
    <link rel="stylesheet" href="app.css">
    <script src="angular.min.js"></script>
    <script src="graph-visualization.bundle.js"></script>
    <script src="three.min.js"></script>
    <script src="app.js"></script>
  </head>
  <body ng-controller="BrainiacCtrl">

    <script type="text/javascript">
      i=${i};
      run="${server_settings.run}";
      epsilon=${s.epsilon};
      attraction=${s.attraction};
      repulsion=${s.repulsion};
      friction=${s.friction};
      time_dilation=${s.time_dilation};
      inner_distance=${s.inner_distance};
      dampening=${s.dampening};
      theta=${s.theta};
    </script>
    <graph-visualization id="graph"
      data-settings-i="${i}"
      width="100%"
      height="100%"
      epsilon="${s.epsilon}"
      attraction="${s.attraction}"
      repulsion="${s.repulsion}"
      friction="${s.friction}"
      time-dilation="${s.time_dilation}"
      inner-distance="${s.inner_distance}"
      dampening="${s.dampening}"
      theta="${s.theta}"
      >
      <graph-vertex id="one"></graph-vertex>
      <graph-vertex id="two"></graph-vertex>
      <graph-edge id="edge" source="#one" target="#two"></graph-edge>
    </graph-visualization>
  </body>
</html>
`;

  res.send(template);

  if(!server_settings.randomize){
    i++;
  }
});